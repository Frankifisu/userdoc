Parameterization of a Water Force Field with ReaxFF
===================================================

In this example a ReaxFF force field *Water2017.ff* will be reparameterized to describe the H--OH bond dissociation energy with
with `ADF <../../ADF/index.html>`_ as the reference engine.
The workflow script is stored in `$AMSHOME/scripting/scm/params/examples/ReaxFF_Water/runme.py`,
the complete script can also be viewed :ref:`below <scodereax>`.

The script covers the following steps:
  * Conversion of ``.bgf`` file to a |JobCollection|
  * Construction of the training set
  * Definition an |EngineCollection| and the Reference Engine
  * Calculation of the reference data
  * Parameterization with the |OptCMA|
  * Generation of plots to evaluate the performance of the newly found parameters

We start by instantiating a training data set, engine collection and limiting
the total optimization time to five minutes for the sake of this example:

.. literalinclude:: /../../examples/ReaxFF_Water/runme.py
  :lines: 23-26

.. note::
  In a real application the optimization time limit is far from sufficient for a good fit,
  and might in fact not necessarily yield a better force field than the original.
  If this happens, try increasing the time limit and running again.

Our training set geometries are stored in ``$AMSHOME/scripting/scm/params/examples/ReaxFF_Water/xyz/movie.bgf``.
AMSMovie supports the export of multiple geometries in this format.
We use :func:`~scm.params.common.reaxff_converter.geo_to_params` to convert it to
:class:`plams.Molecule` objects and add each geometry to the Job Collection with the respective task.
We are additionally requesting the gradients through the ``normal_run_settings`` keyword:

.. literalinclude:: /../../examples/ReaxFF_Water/runme.py
  :lines: 29-39

Before we can start the optimization, we need to define a :ref:`training set <Data Set>`, *i.e.* decide
which systems and system properties :math:`P(R)` we are interested in.
This happens in the following block:

.. literalinclude:: /../../examples/ReaxFF_Water/runme.py
  :lines: 42-48

Now that the training set is defined, we need to provide the reference values
for every entry.
We are making use of the :meth:`JobCollection.run() <scm.params.core.jobcollection.JobCollection.run>`
method to calculate all jobs defined in our Job Collection.
By additionally passing the ``engine_settings`` argument, we specify the reference engine -- in this case ADF:

.. literalinclude:: /../../examples/ReaxFF_Water/runme.py
  :lines: 51-61

The returned `refresults` can be treated as regular :class:`plams.AMSResults`, relevant properties
:math:`P` are automatically extracted and added to the training set instance.
After all reference values are provided, the data set is stored.
At this point, the data generated by the reference job calculations is no longer needed and can be
deleted from disk. Reference property values will be available in the `training_set.yaml`.

Finally, we select the initial force field that needs optimization,
pass the previous instances to the :ref:`Optimization` class and start the fitting process:

.. literalinclude:: /../../examples/ReaxFF_Water/runme.py
  :lines: 64-67


The optimization results are written to a new *Water2017.ff.optimized* file.
Afterwards, a few more jobs are started to generate a comparison plot.
Once the script is done, the following files should be of interest:

* *Water2017.ff.optimized* -- The optimized parameters, stored in the ReaxFF force field format
* *job_collection.yml*      -- Job Collection holding the settings and geometries extracted from *xyz/movie.bgf*
* *training_set.yml*        -- The training set data used for the fit
* *plot_results.png*       -- Comparison of the dissociation energies for ADF-LDA, *Water2017.ff* and *Water2017.ff.optimized*
* *plot_optimizer.png*     -- Plot of the best cost function value as a function of the iteration number

The comparison plot *plot_results.png* should look similar to this:

.. image:: /_static/reax_water_example.png
    :width: 650px
    :align: center

Execute the script once again to clean up the example folder (deleting all files generated during the optimization).


.. _scodereax:

Complete Example Script
-----------------------
Located in `$AMSHOME/scripting/scm/params/examples/ReaxFF_Water/runme.py`

.. literalinclude:: /../../examples/ReaxFF_Water/runme.py
  :lines: 1-74


Changing the Example Script
---------------------------

Based on the original script above, the user could try the following, in order to familiarize oneself with the ParAMS package:

* Add more structures to the job collection
* Fit other properties in addition to energies
* Experiment with different :ref:`CMA settings <cmasettings>`, especially ``sigma`` and ``popsize``.
* Use a different reference engine
* Add external reference values to the training set, instead of calculating them
